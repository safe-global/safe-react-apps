name: Deploy safe apps
# Run on pushes to dev/main or PR
on:
  # Pull request hook without any config. Launches for every pull request
  pull_request:
  # Launches for pushes to main or dev
  push:
    branches:
      - main
      - development
  # Launches build when release is published
  release:
    types: [published]
env:
  REPO_NAME_ALPHANUMERIC: safereactapps

jobs:
  deploy:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
      - name: Remove broken apt repos [Ubuntu]
        if: ${{ runner.os }} == 'ubuntu-latest'
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

      - uses: actions/checkout@v2

      - name: Node.js setup
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Env dependencies setup
        run: |
          sudo apt-get update
          sudo apt-get -y install python3-pip python3-dev
          pip install awscli --upgrade --user

      - name: Project dependencies setup, node version ${{ matrix.node-version }}
        run: |
          # If you have dependencies from git (wc app), yarn may randomly throw an error about invalid cache
          # This approach is taken from https://github.com/yarnpkg/yarn/issues/7212#issuecomment-506155894 to fix the issue
          # Another approach is to install with flag --network-concurrency 1, but this will make the installation pretty slow (default value is 8)
          mkdir .yarncache
          yarn install --cache-folder ./.yarncache --frozen-lockfile
          rm -rf .yarncache
          yarn cache clean

      - name: Build apps
        run: yarn build
        env:
          REACT_APP_RPC_TOKEN: ${{ secrets.REACT_APP_RPC_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Script to deploy Pull Requests
      - run: bash ./scripts/deploy_pr.sh
        if: success() && github.event.number
        env:
          PR_NUMBER: ${{ github.event.number }}
          REVIEW_BUCKET_NAME: ${{ secrets.AWS_REVIEW_BUCKET_NAME }}

      - name: 'PRaul: Comment PR with app URLs'
        if: success() && github.event.number
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            * [Compound app](${{ env.REVIEW_FEATURE_URL }}/compound/)
            * [WalletConnect app](${{ env.REVIEW_FEATURE_URL }}/wallet-connect/)
            * [Tx Builder App](${{ env.REVIEW_FEATURE_URL }}/tx-builder/)
            * [Drain Account App](${{ env.REVIEW_FEATURE_URL }}/drain-safe/)
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
        env:
          REVIEW_FEATURE_URL: https://pr${{ github.event.number }}--${{ env.REPO_NAME_ALPHANUMERIC }}.review.gnosisdev.com

      # Script to deploy to the dev environment
      - name: 'Deploy to S3: Develop'
        if: github.ref == 'refs/heads/development'
        run: bash ./scripts/deploy_to_s3_bucket.sh
        env:
          BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}

      # Script to deploy to staging environment
      - name: 'Deploy to S3: Staging'
        if: github.ref == 'refs/heads/main'
        run: bash ./scripts/deploy_to_s3_bucket.sh
        env:
          BUCKET_NAME: ${{ secrets.STAGING_BUCKET_NAME }}/current

      # Script to upload release files
      - name: 'Upload to S3: apps build files for production'
        if: startsWith(github.ref, 'refs/tags/v')
        run: bash ./scripts/deploy_to_s3_bucket.sh
        env:
          BUCKET_NAME: ${{ secrets.STAGING_BUCKET_NAME }}/releases/${{ github.event.release.tag_name }}

      # Script to notify production deployments
      - run: bash ./scripts/prepare_production_deployment.sh
        if: success() && startsWith(github.ref, 'refs/tags/v')
        env:
          PROD_DEPLOYMENT_HOOK_TOKEN: ${{ secrets.PROD_DEPLOYMENT_HOOK_TOKEN }}
          PROD_DEPLOYMENT_HOOK_URL: ${{ secrets.PROD_DEPLOYMENT_HOOK_URL }}
          VERSION_TAG: ${{ github.event.release.tag_name }}
